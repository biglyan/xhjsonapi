{"version":3,"sources":["xhjsonapi.js","src/xhjsonapi.js"],"names":[],"mappings":"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","file":"xhjsonapi.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('frisbee')) :\n  typeof define === 'function' && define.amd ? define(['frisbee'], factory) :\n  global.XHJsonApi = factory(global.Frisbee)\n}(this, function (Frisbee) { 'use strict';\n\n  /**\n  生成符合 jsonrpc 2.0 规范的 api，基于 frisbee\n\n  @author zhangxhbeta\n  */\n\n  class XHJsonApi extends Frisbee{\n\n    constructor(opts) {\n      super(opts);\n\n      if (!this.opts.rpcPath) {\n        throw new Error('需要提供rpc路径参数（rpcPath）');\n      }\n\n      if (!this.opts.methods) {\n        throw new Error('需要提供方法定义列表（methods）');\n      }\n\n      this.opts.methods.forEach((namespace) => {\n        this[namespace.name] = namespace.methods.reduce((result, method) => {\n          // 依次设置方法函数\n          result[method] = (...params) => {\n            const payload = {\n              jsonrpc: '2.0',\n              method: namespace.name + '.' + method,\n              id: 1,\n              params: params,\n            };\n\n            return this.post(this.opts.rpcPath, {credentials: 'include', body: JSON.stringify(payload)})\n              .then((response, body) => {\n                // 这里接收到 body 和 原始的 response\n                if (typeof body === 'object') {\n                  const result = body.result;\n                  const error = body.error;\n                  if (!result) {\n                    // 成功返回结果\n                    return {result, body};\n                  } else if (!error) {\n                    if (typeof error === 'object' && error.code && error.message) {\n                      throw new Error({code: error.code, message: error.message});\n                    } else {\n                      throw new Error({code: -32700, message: '无法解析响应的错误信息'});\n                    }\n                  } else {\n                    throw new Error({code: -32700, message: '无法解析响应'});\n                  }\n                } else {\n                  throw new Error({code: -32700, message: '无法解析响应'});\n                }\n              });\n          };\n          return result;\n        }, {});\n      });\n    }\n  }\n\n  return XHJsonApi;\n\n}));\n","/**\n生成符合 jsonrpc 2.0 规范的 api，基于 frisbee\n\n@author zhangxhbeta\n*/\n\nimport Frisbee from 'frisbee';\n\nexport default class XHJsonApi extends Frisbee{\n\n  constructor(opts) {\n    super(opts);\n\n    if (!this.opts.rpcPath) {\n      throw new Error('需要提供rpc路径参数（rpcPath）');\n    }\n\n    if (!this.opts.methods) {\n      throw new Error('需要提供方法定义列表（methods）');\n    }\n\n    this.opts.methods.forEach((namespace) => {\n      this[namespace.name] = namespace.methods.reduce((result, method) => {\n        // 依次设置方法函数\n        result[method] = (...params) => {\n          const payload = {\n            jsonrpc: '2.0',\n            method: namespace.name + '.' + method,\n            id: 1,\n            params: params,\n          };\n\n          return this.post(this.opts.rpcPath, {credentials: 'include', body: JSON.stringify(payload)})\n            .then((response, body) => {\n              // 这里接收到 body 和 原始的 response\n              if (typeof body === 'object') {\n                const result = body.result;\n                const error = body.error;\n                if (!result) {\n                  // 成功返回结果\n                  return {result, body};\n                } else if (!error) {\n                  if (typeof error === 'object' && error.code && error.message) {\n                    throw new Error({code: error.code, message: error.message});\n                  } else {\n                    throw new Error({code: -32700, message: '无法解析响应的错误信息'});\n                  }\n                } else {\n                  throw new Error({code: -32700, message: '无法解析响应'});\n                }\n              } else {\n                throw new Error({code: -32700, message: '无法解析响应'});\n              }\n            });\n        };\n        return result;\n      }, {});\n    });\n  }\n}\n"],"sourceRoot":"/source/"}